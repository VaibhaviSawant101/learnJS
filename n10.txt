Asynchronous Programming
conclusion(better) - async await >> promise chain >> callback hell

Synchronous
Synchronous means the code runs in a particular sequence of instructions
given in the program. Each instruction waits for the previous instructions
to complete its execution.

Asynchronous
Due to Synchronous Programming, sometimes imp instructions get blocked 
due to some previous instructions, which causes a delay in the UI.
Asynchronous code execution allows to execute next instructions immediately
amd doesn't block the flow.

Callback
A callback is a function passed as an argument to another function
dont pass with parenthesis

Callback hell
Callback Hell : Nested callback stacked below one another forming pyramid structure.
(Pyramid of Doom)
This style of programming becomes difficult to understand and manage

Promises
Promise is for "eventual" completion of task. It is an object in JS.
It is a solution to callback hell.

let promise = new Promise((resolve, reject)=>{....})
resolve and reject are callback provided by JS

state - pending, fulfield, rejected
promise are generated by api to tell there state
so to deal with data
we just handle the promises

#Async-Await
async function always returns a promise.
async function myFunc(){...}
await pauses the execution of its surrounding async function until the promise is settled
